{"version":3,"sources":["../src/index.ts","../src/DataSet.ts","../src/Fez.ts","../src/Limon.ts"],"sourcesContent":["export { default as DataSet } from \"./DataSet\";\nexport { default as Fez } from \"./Fez\";\nexport { default as Limon } from \"./Limon\";\n","export default class DataSet<T> extends Set<T> {\n    some(predicate: (value: T, set: DataSet<T>) => unknown): boolean {\n        for (const value of this) {\n            if (predicate(value, this)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    filter(predicate: (value: T, set: DataSet<T>) => unknown): DataSet<T> {\n        const result = new DataSet<T>();\n        for (const item of this) {\n            if (predicate(item, this)) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    random(): T | null {\n        const it = this.values();\n        const index = Math.floor(Math.random() * this.size);\n        for (let i = 0; i < index; i++) {\n            it.next();\n        }\n        return it.next().value ?? null;\n    }\n}\n\nexport function ensureDataSet<K, T>(map: Map<K, DataSet<T>>, key: K): DataSet<T> {\n    const set = map.get(key) ?? new DataSet<T>();\n    map.set(key, set);\n    return set;\n}\n","import { Phoneme, Pronunciation } from \"node-cmudict\";\n\nexport default class Fez {\n    public readonly syllables: string[];\n    public readonly lastRawSyllable: string;\n\n    private static formatSyllable(syllable: Phoneme[]): string {\n        return syllable.map(phoneme => phoneme.phoneme).join(\" \");\n    }\n\n    constructor(public readonly pronunciation: Pronunciation) {\n        this.syllables = [];\n        let syllable: Phoneme[] = [];\n        let excess: Phoneme[] = [];\n        for (const phoneme of this.pronunciation.phonemes) {\n            if (phoneme.stress != null) {\n                if (syllable.length) {\n                    this.syllables.push(Fez.formatSyllable(syllable));\n                }\n                syllable = [phoneme];\n                excess = [];\n            }\n            else if (syllable[0]?.stress && syllable[0].stress < syllable.length) {\n                syllable.push(phoneme);\n            }\n            else {\n                excess.push(phoneme);\n            }\n        }\n        if (syllable.length) {\n            this.lastRawSyllable = Fez.formatSyllable(syllable.concat(excess));\n            this.syllables.push(Fez.formatSyllable(syllable));\n        }\n        else { // Some donkus decided to create a pronunciation with no stressed phonemes\n            this.lastRawSyllable = this.pronunciation.phonemes.join(\" \");\n            this.syllables = [this.lastRawSyllable];\n        }\n    }\n\n    public get syllableCount(): number {\n        return this.syllables.length;\n    }\n\n    public get lastSyllable(): string {\n        return this.syllables[this.syllables.length - 1];\n    }\n}\n","import { Entry, getDict } from \"node-cmudict\";\nimport DataSet, { ensureDataSet } from \"./DataSet\";\nimport Fez from \"./Fez\";\n\nexport default class Limon {\n    private static _instance: Limon;\n\n    private _dict: Map<string, Entry> | null;\n    public readonly rhymeData: Map<string, DataSet<Fez>>;\n\n    private constructor() {\n        this._dict = null;\n        this.rhymeData = new Map<string, DataSet<Fez>>();\n    }\n\n    /**\n     * Get the singleton instance of the class.\n     */\n    public static getInstance(): Limon {\n        if (!Limon._instance) {\n            Limon._instance = new Limon();\n        }\n        return Limon._instance;\n    }\n\n    public get dict() {\n        return this._dict;\n    }\n\n    public get initialized(): boolean {\n        return Boolean(this._dict && this.rhymeData.size);\n    }\n\n    /**\n     * Set the cmudict dictionary. Overwrites the current dictionary if it exists.\n     * @param dict The dictionary to use. Defaults to getting a new cmudict dictionary.\n     */\n    public setDict(dict?: Map<string, Entry>): void {\n        this._dict = dict ?? getDict();\n    }\n\n    /**\n     * Parse the dictionary for syllables\n     */\n    public init(): void {\n        if (!this._dict) {\n            this.setDict();\n        }\n        for (const entry of this._dict!.values()) {\n            for (const pronunciation of entry.pronunciations) {\n                const fez = new Fez(pronunciation);\n                if (fez.syllableCount === 1) {\n                    const data = ensureDataSet(this.rhymeData, fez.lastSyllable);\n                    if (!data.some(other => pronunciation.equals(other.pronunciation))) {\n                        data.add(fez);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Limon fez!\n     * @param word The word to nonsensify\n     */\n    public exec(word: string): string | null {\n        if (!this.initialized) {\n            this.init();\n        }\n        const formatted = word.trim().toLowerCase();\n        const entry = this._dict!.get(formatted);\n        if (!entry) {\n            return null;\n        }\n        const variations = new DataSet<string>();\n        for (const pronunciation of entry.pronunciations) {\n            const fez = new Fez(pronunciation);\n            let output: string[] = [];\n            for (let i = 0; i < fez.syllableCount; i++) {\n                const data = this.rhymeData.get(fez.syllables[i]);\n                if (data) {\n                    const rhymes = i === fez.syllableCount - 1 ?\n                        data.filter(other => other.lastRawSyllable === fez.lastRawSyllable) :\n                        data;\n                    const match = rhymes.random();\n                    if (match) {\n                        output.push(match.pronunciation.entry.name);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            if (output.length === fez.syllableCount) {\n                variations.add(output.join(\"\"));\n            }\n        }\n        return variations.random();\n    }\n}\n"],"mappings":"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","names":[]}